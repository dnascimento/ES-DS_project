<?xml version="1.0" encoding="UTF-8"?>
<project name="Anacom-JBoss+GWT" default="compile" basedir=".">
	<description>Anacom with JBoss web services</description>

	<!-- Read environment properties first -->
	<property environment="env" />
	<!-- Override default property values with an external properties file, 
	     if present, with the user's machine specific configuration.        -->
	<property file="${user.home}/build.properties"/>
	<!-- Then read the default configuration properties -->
	<property file="build.properties"/>

	<property name="application.name"   value="anacom" />
	<property name="javac.encoding"     value="UTF-8" />
	<property name="java.file.encoding" value="UTF-8" />

	<!-- Main directories-->
	<property name="src.rel-dir"      value="src/main" />       <!--Source de código da app-->
	<property name="test.src.rel-dir" value="src/test" />       <!-- Source do código de testes-->
	<property name="lib.rel-dir"      value="../lib" />         <!-- Localizacao da lib -->
	<property name="build.rel-dir"    value="build" />		    <!-- localizacao de build -->
	<property name="dist.rel-dir"     value="dist" />
	<property name="uddi.dir" 	      value="src/main/uddi" />

	<!-- Directories with the source, e.g. java, dml, webapps -->
	<property name="java.src.rel-dir"      value="${src.rel-dir}/java" />   <!-- src do código -->
	<property name="java.test.src.rel-dir" value="${test.src.rel-dir}/java" />
	<property name="dml.src.rel-dir"       value="${src.rel-dir}/dml" />   <!-- localização do dml -->
	<property name="webas.src.rel-dir"     value="${src.rel-dir}/webas" />
	<property name="webps.src.rel-dir"     value="${src.rel-dir}/webps" />
	<property name="webca.src.rel-dir"     value="${src.rel-dir}/webas" /> <!-- web CA data -->
	
	<!-- Handlers server-side -->
	<property name="handler.src-dir"   		value="${src.rel-dir}/java/pt/ist/anacom/applicationserver/handler" />
	<property name ="handler.build-dir"		value="${build.rel-dir}/war/WEB-INF/classes/pt/ist/anacom/applicationserver/handler"/>
	
	
	<property name="keys-dir" value="/tmp/keys"/>
	<property name="keys-dir.test" value="/tmp/keys_test"/>
	
	
	<!-- JBoss references -->
	<property environment="env" />
	<!-- property name="jboss.home" at build.properties -->
	<property name="jboss.temp.rel-dir" value="/tmp" />              <!-- onde guardar a DB -->
	<property name="db.rel-dir"         value="/tmp/db" />
	<property name="test-db.rel-dir"    value="/tmp/test-db" />      <!-- a BD de testes fica na TMP -->

	<!-- WSDL References -->
	<property name="stubs.package" value="pt.ist.anacom.shared.stubs" />
	<property name="project.localwsdl"  value="${webas.src.rel-dir}/${application.name}.wsdl" />     <!-- localização do wsdl -->

	<property name="stubs.ca.package" value="pt.ist.anacom.shared.stubs.ca" />
	<property name="project.cawsdl"  value="${webca.src.rel-dir}/ca.wsdl" />      <!-- localização do wsdl do CA-->

	
	
	<!-- DML files -->
	<property name="dml.filename" value="${application.name}.dml" />					<!-- Nome do ficheiro .dml -->
	<property name="dml.rel-file" value="${dml.src.rel-dir}/${dml.filename}" />			<!-- localização exacta do ficheiro .dml -->

	<!-- Binding -->
	<property name="resources.dir" value="src/resources" />
	<property name="binding.file" value="${resources.dir}/async.binding" />
	
	<!-- Directories with generated source -->
	<property name="generated-src.build.rel-dir" value="${build.rel-dir}/src" />		<!-- onde guardar os ficheiros gerados-->

	<!-- Directories with the .class, .e.g used to build the wars -->
	<property name="classes.build.rel-dir" value="${build.rel-dir}/war/WEB-INF/classes" />

	<!-- War distribution -->
	<property name="war-es.target.rel-dir" value="${build.rel-dir}/war-es" />					<!-- onde guardar os war -->
	<property name="war-es.filename"       value="${application.name}-es.war" />
	
	<property name="dist.rel-dir"    value="dist" />
	<property name="dist.as.warfile" value="${dist.rel-dir}/${application.name}-as.war" />
	<property name="dist.ps.warfile" value="${dist.rel-dir}/${application.name}-ps.war" />
	<property name="dist.ca.warfile" value="${dist.rel-dir}/ca.war" />

	<!-- Deploy directories -->
	<property name="deploy.dir" value="${jboss.home}/standalone/deployments" />

	<!-- GWT SDK -->
    <!-- property name="gwt.sdk.home" at build.properties -->
	<property name="gwt.war.rel-dir" value="${build.rel-dir}/war" />
	<property name="gwt.war.classes.rel-dir" value="${gwt.war.rel-dir}/WEB-INF/classes" />
	<property name="gwt.war.lib.rel-dir" value="${gwt.war.rel-dir}/WEB-INF/lib" />
	<!-- Arguments to gwtc and devmode targets -->
	<property name="gwt.args" value="" />

	<path id="project.classpath">
		<pathelement location="${classes.build.rel-dir}" />
		<fileset dir="${gwt.sdk.home}">
			<include name="**/*.jar" />
		</fileset>
		<!-- SD -->
		<fileset dir="${jboss.home}/modules">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${lib.rel-dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<path id="ws-stubs.classpath">
		<!-- SD -->
		<fileset dir="${jboss.home}/modules">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${lib.rel-dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<taskdef resource="pt/ist/fenixframework/dml-ant.xml"  classpathref="project.classpath" />

	
	
	<!-- ###################### TARGETS A UTILIZAR ############## -->
	 
	<target name="prepare">
		<echo message="Preparing the project for build (making dirs)..." />
		<mkdir dir="${classes.build.rel-dir}" />
		<mkdir dir="${db.rel-dir}" />
		<mkdir dir="${keys-dir}" />
		<mkdir dir="${keys-dir.test}" />
		<mkdir dir="${test-db.rel-dir}" />
		<copy file="${dml.rel-file}" todir="${jboss.temp.rel-dir}" />
		<copy todir="${gwt.war.rel-dir}">
		  <fileset dir="." includes="**/*.dml"/>
		</copy>
	</target>

	
	<!-- Gerar o dominio do .dml para a FenixFrameWork 
			
	-->
	<target name="generate-domain" depends="prepare" description="Generate the _base.java files for FenixFramework">
		<echo message="Generating base domain classes..." />
		<echo message="Using: ${dml.rel-file}" />
		<dml-domain-generator destDirectory="${java.src.rel-dir}" destDirectoryBase="${generated-src.build.rel-dir}">  <!-- Ficheiros de suporte, pasta de destino --> 
			<fileset file="${dml.rel-file}" /> 
		</dml-domain-generator>
	</target>

	<!-- Compilar os _base.java-->
	<target name="compile-domain" depends="generate-domain, generate-ws-stubs" description="Javac the source files">
		<echo message="Compiling sources..." />
		<javac destdir="${classes.build.rel-dir}" 
			   debug="true" debuglevel="lines,vars,source" 
			   optimize="true" deprecation="true" verbose="false" 
			   includeantruntime="false">
			<classpath refid="project.classpath" />
			<src>
				<pathelement path="${generated-src.build.rel-dir}:${java.src.rel-dir}" />
			</src>
			<compilerarg line="" />
		</javac>
	</target>

	
	<!-- Compilar o projecto -->
	<target name="compile" depends="compile-domain" description="Compiles the project">
		<!-- instrument-classes -->
		<echo message="Injecting ByteCode to reinitialize FenixFramework persisted objects..." />
				<dml-post-processor dir="${classes.build.rel-dir}">
					<fileset file="${dml.rel-file}" />
					<classpath refid="project.classpath" />
		</dml-post-processor>
		<copy todir="${gwt.war.rel-dir}">
			<fileset dir="${webps.src.rel-dir}" /> 	<!-- Copiar as pastas de GWT -->
		</copy>
		<copy todir="${gwt.war.lib.rel-dir}"> 		<!-- copiar a lib para dentro do projecto -->
			<fileset dir="${lib.rel-dir}" />
		</copy>
	    <copy todir="${gwt.war.lib.rel-dir}" flatten="yes">			<!-- copiar os .jar do gwt -->
	      <fileset dir="${gwt.sdk.home}" includes="gwt-servlet.jar" />
	    </copy>
	</target>
	
	
	 

	<!--  ########################### Targets para Testes ######################### -->
	
	<!-- Compilar os ficheiros de teste -->
	<target name="compile-tests" depends="compile" 
		    description="Compile the tests">
		<javac destdir="${classes.build.rel-dir}"   debug="true" debuglevel="lines,vars,source"  
			   optimize="true" deprecation="true" verbose="false" includeantruntime="false" encoding="${javac.encoding}">
			<classpath refid="project.classpath" />
			<src>
				<pathelement path="${java.test.src.rel-dir}" />
			</src>
		</javac>
	</target>


	<target name="test-Services" depends="compile-tests" description="Run the tests">
		<echo message="Testing all services..." />
		<junit fork="false">
			<classpath refid="project.classpath" />
			<formatter type="brief" usefile="false" />
			<test name="pt.ist.anacom.test.services.AddBalanceTestCase" />
			<test name="pt.ist.anacom.test.services.CreateOperatorWithTariffServiceTestCase" />
			<test name="pt.ist.anacom.test.services.SendSMSTestCase" />
			<test name="pt.ist.anacom.test.services.MakeVoiceCallTestCase" />
			<test name="pt.ist.anacom.test.services.ShowLastCommunicationTestCase" />
		</junit>
	</target>

	
	<target name="test-CertificationAuthority" depends="compile-tests" description="Run the tests">
		<echo message="Testing CertificationAuthority..." />
		<junit fork="false">
			<classpath refid="project.classpath" />
			<formatter type="brief" usefile="false" />
	      	<test name="pt.ist.anacom.test.security.CATestCase" /> 
			<test name="pt.ist.anacom.test.security.SecurityTestCase" /> 
		</junit>
	</target>
	
	<target name="test-Replication" depends="compile-tests" description="Run the tests">
			<echo message="Testing Replication..." />
			<junit fork="false">
				<classpath refid="project.classpath" />
				<formatter type="brief" usefile="false" />
		      	<!-- <test name="pt.ist.anacom.test.ca.CATestCase" /> 
				<test name="pt.ist.anacom.test.ca.SecurityManagerTestCase" /> -->
				 <test name="pt.ist.anacom.test.replication.JmockTestCase" /> 
			</junit>
		</target>
	
	<!--
	<target name="test-sd" depends="compile-tests" description="Run the tests">
		<echo message="Testing all services..." />
		<junit fork="false">
			<classpath refid="project.classpath" />
			<formatter type="brief" usefile="false" />
			<test name="pt.ist.anacom.test.AddBalanceTestCase" />
	    	<test name="pt.ist.anacom.test.CreateOperatorWithTariffServiceTest" />
	    	<test name="pt.ist.anacom.test.SendSMSTest" />
		</junit>
	</target>
	-->
	
	
	
	
	<!--  ########################### Targets para ES ######################### -->
	<target name="run-local" depends="compile" description="Runs the program with a local application server">
		<java classname="pt.ist.anacom.presentationserver.PresentationServer"   fork="false">
			<classpath>
				<path refid="project.classpath" />
			</classpath>
			<sysproperty key="server.type" value="ES-only" />
		</java>
	</target>

	<target name="gwtc" depends="compile" 
		    description="GWT compile to JavaScript (production mode)">
		<java failonerror="true" fork="true" classname="com.google.gwt.dev.Compiler">
			<classpath>
				<pathelement location="${java.src.rel-dir}" />
				<path refid="project.classpath" />
			</classpath>
			<!-- add jvmarg -Xss16M or similar if you see a StackOverflowError -->
			<jvmarg value="-Xmx256M" />
			<arg line="-war" />
			<arg value="${gwt.war.rel-dir}" />
			<!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
			<arg line="${gwt.args}" />
			<arg value="pt.ist.anacom.presentationserver.Anacom" />
		</java>
	</target>
	
	<target name="gwt-devmode" depends="compile" >
		<echo message="Running GWT in devmode with URL='${startUpURL}'"/>
		<mkdir dir="${gwt.war.classes.rel-dir}" />
		<copy todir="${gwt.war.classes.rel-dir}">
		  <fileset dir="${classes.build.rel-dir}" includes="**/*.class"/>
		</copy>
		<copy todir="${gwt.war.classes.rel-dir}">
		  <fileset dir="${java.src.rel-dir}" excludes="**/*.java"/>
		</copy>
		<copy todir="${gwt.war.classes.rel-dir}" file="log4j.properties" />
		<copy todir="${gwt.war.lib.rel-dir}" flatten="yes">
		  <fileset dir="${jboss.home}" includes="**/cxf-*.jar" />
		</copy>
		<java failonerror="true" fork="true" classname="com.google.gwt.dev.DevMode">
		  <classpath>
		    <path refid="project.classpath"/>
		        <pathelement location="${java.src.rel-dir}" />
		  </classpath>
		  <jvmarg value="-Xmx256M"/>
		  <arg value="-startupUrl"/>
		  <arg value="${startUpURL}"/>
		  <arg line="-war"/>
		  <arg value="${gwt.war.rel-dir}"/>
		  <!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
		  <arg line="${gwt.args}"/>
		  <arg value="pt.ist.anacom.presentationserver.Anacom"/>
		</java>
	</target>
	
	<target name="devmode-es" 
		    description="Runs GWT in development mode with Software Engineering configuration">
	  <antcall target="gwt-devmode">
	    <param name="startUpURL" value="index.html"/>
	  </antcall>
	</target>

	<target name="devmode-sd"
            description="Runs GWT in development mode with Distributed Systems configuration">
	  <antcall target="gwt-devmode">
	    <param name="startUpURL" value="remote.html"/>
	  </antcall>
	</target>
	
	<target name="devmode-sd-replikate"
            description="Runs GWT with Distributed Systems replicate conf">
	  <antcall target="gwt-devmode">
	    <param name="startUpURL" value="remoteReplicate.html"/>
	  </antcall>
	</target>

	
	
	<!--  ########################### Targets para SD ######################### -->
	<target name="generate-ws-stubs" depends="prepare" description="Generate Web Service Java code from local WSDL, for the server">
		<taskdef name="wsconsume" classname="org.jboss.ws.tools.ant.WSConsumeTask">
			<classpath>
				<path refid="ws-stubs.classpath" />
			</classpath>
		</taskdef>
		<echo message="Executing wsconsume to generate server-side code..." />
		<echo message="WSDL: ${project.localwsdl}" />
		<wsconsume fork="false" verbose="true" keep="true" package="${stubs.package}"
			       wsdl="${project.localwsdl}"  sourcedestdir="${generated-src.build.rel-dir}"  destdir="${classes.build.rel-dir}" 
					binding="${binding.file}" />
		<echo message="WSDL: ${project.cawsdl}" />
			<wsconsume fork="false" verbose="true" keep="true" package="${stubs.ca.package}"
						       wsdl="${project.cawsdl}"  sourcedestdir="${generated-src.build.rel-dir}"  destdir="${classes.build.rel-dir}" />
	</target>

	
	<!-- Application Server -->
	<target name="war-as-sd" depends="copyhandlersSERVER" description="Create the web service distribution archive">
		<echo message="Criar o war: ${project.name}.${project.type}"/>
		<copy overwrite="true" file="${webas.src.rel-dir}/WEB-INF/${project.name}.xml" tofile="${webas.src.rel-dir}/WEB-INF/web.xml"  /> <!-- substituir o web.xml -->
		<fail unless="project.type">project.type not set</fail>
		<war warfile="${dist.rel-dir}/${project.name}.${project.type}" webxml="${webas.src.rel-dir}/WEB-INF/web.xml">
			<classes dir="${classes.build.rel-dir}" />
			<tarfileset dir="${webas.src.rel-dir}">
				<include name="*.wsdl" />
			</tarfileset>
			<!-- copia o ficheiro uddi.xml -->
			<tarfileset dir="${uddi.dir}" prefix="WEB-INF/classes">
				<include name="uddi.xml"/>
			</tarfileset>
			<tarfileset dir="${lib.rel-dir}" prefix="WEB-INF/lib">
				<include name="**.jar" />
			</tarfileset>
		</war>
		<!-- deploy as sd  Deploy web service to JBoss AS-->
		<fail unless="jboss.home">project.jboss.home not set</fail>
		<copy todir="${deploy.dir}" file="${dist.rel-dir}/${project.name}.${project.type}" /> <!-- Copiar a war gerada para o directorio jboss -->
		<delete dir="${dist.rel-dir}" /> <!-- dist temporaria -->
	</target>
	
	<!-- Acrescenta handlers server-side e CA-->
	<target name="copyhandlersSERVER" description="Copy xml soap handlers files">	
		
		<copy todir="${handler.build-dir}">
			<fileset dir="${handler.src-dir}">
				<include name="**/*.xml"/>
			</fileset>
		</copy>
	</target>
	
	

	

	<!-- instanciar o CA no servidor-->
		<target name="deploy-CA">
	      <antcall target="war-as-sd" >
	      	<param name="project.name" value="CA"/>
	      </antcall>
		</target>
	
	
	<!-- instanciar o TMN no servidor-->
	<target name="deploy-TMN">
      <antcall target="war-as-sd" >
      	<param name="project.name" value="TMN"/>
      </antcall>
	</target>
	
	<!-- instanciar o Optimus no servidor: Invoc-->
	<target name="deploy-Optimus">
      <antcall target="war-as-sd" >
      	<param name="project.name" value="Optimus"/>
      </antcall>
	</target>
	
	<!-- instanciar o Vodafone-R1,2,3 no servidor: Invoc-->
	
	<target name="deeploy-Vodafone-Sincronized" depends="compile">
		
			<antcall target="war-as-sd" >
				<param name="project.name" value="CA"/>
			</antcall>
			
			<sleep seconds="6"/>
			
			<antcall target="war-as-sd" >
				<param name="project.name" value="Vodafone-R1"/>
			</antcall>
			
			<sleep seconds="12"/>
			
			<antcall target="war-as-sd" >
				<param name="project.name" value="Vodafone-R2"/>
			</antcall>
			
			<sleep seconds="6"/>
			
			<antcall target="war-as-sd" >
				<param name="project.name" value="Vodafone-R3"/>
			</antcall>
			
			<sleep seconds="6"/>
			
			<antcall target="war-as-sd" >
				<param name="project.name" value="Vodafone-R4"/>
			</antcall>
		</target>
	
	<target name="deploy-Vodafone-R1">
		<antcall target="war-as-sd" >
			<param name="project.name" value="Vodafone-R1"/>
		</antcall>
	</target>
	
	<target name="deploy-Vodafone-R2">
		<antcall target="war-as-sd" >
			<param name="project.name" value="Vodafone-R2"/>
		</antcall>
	</target>
	
	<target name="deploy-Vodafone-R3">
		<antcall target="war-as-sd" >
			<param name="project.name" value="Vodafone-R3"/>
		</antcall>
	</target>
	
	<target name="deploy-Vodafone-R4">
			<antcall target="war-as-sd" >
				<param name="project.name" value="Vodafone-R4"/>
			</antcall>
		</target>
	
	<target name="deploy-All" depends="compile,deploy-TMN,deploy-Optimus,deploy-Vodafone-R1,deploy-Vodafone-R2,deploy-Vodafone-R3"/>

	
	<target name="run-remote" depends="compile"  description="Runs the program with a remote application server">
	      <antcall target="run-remote fast(no compile)"/>
	</target>
	
	<target name="run-remote fast(no compile)"  description="Runs the program with a remote application server without compile">
		<java classname="pt.ist.anacom.presentationserver.PresentationServer" 
			  fork="true">
			<classpath>
				<path refid="project.classpath" />
			</classpath>
			<sysproperty key="server.type" value="ES+SD" />
		</java>
	</target>
	
	
	<target name="raun-RepliKate"  depends="compile" description="Runs the program with a remote application server without compile">
		<java classname="pt.ist.anacom.presentationserver.PresentationServer" 
			fork="true">
			<classpath>
				<path refid="project.classpath" />
			</classpath>
			<sysproperty key="server.type" value="SD-RepliKate" />
		</java>
	</target>
	
	
	
	
	<!--  ###########  CLEAN ########### -->
	<target name="clean-all" depends="undeploy-all" description="Cleans the compiled classes and generated sources">
		<delete dir="${build.rel-dir}" /> <!-- .class, stubs e domains -->
		<delete dir="${dist.rel-dir}" />  <!-- dist temporaria -->
		<delete dir="${gwt.war.classes.rel-dir}" />  <!-- gwt -->
		<delete file="${jboss.temp.rel-dir}/${dml.filename}"/> <!-- apagar o dml no tmp -->
		<delete dir="${keys-dir}"/>		<!-- apagar o directório com as chaves -->
		<delete dir="${keys-dir.test}" /> <!-- apagar o directório com as chaves de teste-->
		<delete dir="${test-db.rel-dir}" />		<!-- apagar a BD de testes -->
		<delete dir="${db.rel-dir}" />			<!-- apagar a BD de operadores -->
	</target>
	
	<target name="reset-state" depends="undeploy-all" description="Cleans the compiled classes and generated sources">
		<delete dir="${keys-dir}"/>		<!-- apagar o directório com as chaves -->
		<delete dir="${keys-dir.test}" /> <!-- apagar o directório com as chaves de teste-->
		<delete dir="${test-db.rel-dir}" />		<!-- apagar a BD de testes -->
		<delete dir="${db.rel-dir}" />			<!-- apagar a BD de operadores -->
		<antcall target="prepare"/>
	</target>
	
	<!-- undeploy dos WS, ou seja, limpa a pasta do jboss onde estão os war -->
		<target name="undeploy-all" description="Undeploy from JBoss AS">
			<fail unless="jboss.home">project.jboss.home not set</fail>
			<delete>
			   <fileset dir="${deploy.dir}">
			      <include name="*"/>
			   </fileset>
			</delete>
		</target>
		
		<target name="undeploy-Optimus" description="Undeploy from JBoss AS">
				<fail unless="jboss.home">project.jboss.home not set</fail>
				<delete>
				   <fileset dir="${deploy.dir}">
				      <include name="Optimus.war"/>
				   </fileset>
				</delete>
			</target>
	
	<target name="undeploy-Vodafone-R1" description="Undeploy from JBoss AS">
					<fail unless="jboss.home">project.jboss.home not set</fail>
					<delete>
					   <fileset dir="${deploy.dir}">
					      <include name="Vodafone-R1.war"/>
					   </fileset>
					</delete>
				</target>
	
	<target name="undeploy-Vodafone-R2" description="Undeploy from JBoss AS">
						<fail unless="jboss.home">project.jboss.home not set</fail>
						<delete>
						   <fileset dir="${deploy.dir}">
						      <include name="Vodafone-R2.war"/>
						   </fileset>
						</delete>
					</target>
	
	<target name="undeploy-Vodafone-R3" description="Undeploy from JBoss AS">
						<fail unless="jboss.home">project.jboss.home not set</fail>
						<delete>
						   <fileset dir="${deploy.dir}">
						      <include name="Vodafone-R3.war"/>
						   </fileset>
						</delete>
					</target>
	
	<target name="undeploy-Vodafone-R4" description="Undeploy from JBoss AS">
						<fail unless="jboss.home">project.jboss.home not set</fail>
						<delete>
						   <fileset dir="${deploy.dir}">
						      <include name="Vodafone-R4.war"/>
						   </fileset>
						</delete>
					</target>
	
	<target name="undeploy-CA" description="Undeploy from JBoss AS">
							<fail unless="jboss.home">project.jboss.home not set</fail>
							<delete>
							   <fileset dir="${deploy.dir}">
							      <include name="CA.war"/>
							   </fileset>
							</delete>
						</target>

</project>
